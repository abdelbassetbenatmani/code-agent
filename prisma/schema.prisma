generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  email          String          @unique
  bio            String?
  secondaryEmail String?
  socialLinks    String?
  accounts       Account[]
  Authenticator  Authenticator[]
  sessions       Session[]


  Repo Repo[]
  Team Team[]
  TeamMember TeamMember[]
  Notification Notification[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Repo {
  id              Int            @id
  name            String
  fullName        String
  ownerLogin      String
  private         Boolean
  htmlUrl         String
  description     String?
  cloneUrl        String
  sshUrl          String
  defaultBranch   String
  language        String?
  visibility      String
  createdAt       DateTime
  updatedAt       DateTime
  pushedAt        DateTime
  size            Int
  stargazersCount Int
  watchersCount   Int
  forksCount      Int
  openIssuesCount Int
  userId          String?
  teamId          String?

  reviewCount     Int         @default(0)
  refactorCount   Int         @default(0)
  
  @@unique([ownerLogin, name])
  user            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
  team            Team?       @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

model CodeReview {
  id        String      @id
  repoName  String
  repoOwner String
  reviewer  String     @default("A")
  file      String
  code      String
  path      String     @default("")
  summary   String
  issues    String?
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
}

model CodeRefactor {
  id              String      @id
  repoName        String
  repoOwner       String
  refactorer      String    @default("A")
  file            String
  code            String
  path            String     @default("")
  refactoringCode String
  summary         String
  changes         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  
}



model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  icon        String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  owner       User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([name, ownerId])
  members     TeamMember[]
  repos       Repo[]
  invitations Invitation[]
}

model TeamMember {
  id        String   @id @default(cuid())
  teamId    String
  userId    String
  role      String   @default("member")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

model Invitation {
  id        String   @id @default(cuid())
  email     String   // The email address of the invited user
  teamId    String
  token     String   @unique
  invitedBy String // The username of the person who sent the invitation
  invitedById String // The ID of the user who sent the invitation
  role      String   @default("member") // Role of the invited user in the team
  createdAt DateTime @default(now())
  expiresAt DateTime
  acceptedAt DateTime?
  status    InvitationStatus @default(PENDING)

  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  DECLINED
}



model Notification {
  id          String   @id @default(cuid())
  userId      String
  type        NotificationType
  title       String
  message     String
  read        Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum NotificationType {
  CODE_REVIEW
  CODE_REFACTOR
  TEAM_INVITATION
  TEAM_MEMBER_REMOVED
  TEAM_MEMBER_ROLE_CHANGED
  TEAM_MEMBER_JOINED 
  TEAM_MEMBER_LEFT
  TEAM_MEMBER_REMOVED_BY_OWNER
  TEAM_MEMBER_ACCEPTED_INVITATION
  TEAM_MEMBER_REJECTED_INVITATION
  TEAM_DELETE
  REPO_DELETE
  REPO_ADD
  REPO_UPDATE
}
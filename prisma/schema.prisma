generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  email          String          @unique
  bio            String?
  secondaryEmail String?
  socialLinks    String?
  accounts       Account[]
  Authenticator  Authenticator[]
  sessions       Session[]


  Repo Repo[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Repo {
  id              Int            @id
  name            String
  fullName        String
  ownerLogin      String
  private         Boolean
  htmlUrl         String
  description     String?
  cloneUrl        String
  sshUrl          String
  defaultBranch   String
  language        String?
  visibility      String
  createdAt       DateTime
  updatedAt       DateTime
  pushedAt        DateTime
  size            Int
  stargazersCount Int
  watchersCount   Int
  forksCount      Int
  openIssuesCount Int
  userId          String?

  reviewCount     Int         @default(0)
  refactorCount   Int         @default(0)
  
  @@unique([ownerLogin, name])
  user            User?       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model CodeReview {
  id        String      @id
  repoName  String
  repoOwner String
  file      String
  code      String
  path      String     @default("")
  summary   String
  issues    String?
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  
}

model CodeRefactor {
  id              String      @id
  repoName        String
  repoOwner       String
  file            String
  code            String
  path            String     @default("")
  refactoringCode String
  summary         String
  changes         String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userId          String
  
}
